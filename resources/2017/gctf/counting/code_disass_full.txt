              +0   +2   +4   +6   +8       +C          >>> MAIN START
(0x00 (..0), '0100 .... 0000 .... 01000000 02000000'), \ ADD/SET R1,R0 ; SET R0,0
(0x01 (..1), '0000 .... 0100 .... 00000000 ........'), /
(0x02 (..2), '0000 .... 0200 .... 03000000 ........'), \ ADD/SET R2,11(0xB)
(0x03 (..3), '0000 .... 0200 .... 04000000 ........'), |
(0x04 (..4), '0000 .... 0200 .... 05000000 ........'), |
(0x05 (..5), '0000 .... 0200 .... 06000000 ........'), |
(0x06 (..6), '0000 .... 0200 .... 07000000 ........'), |
(0x07 (..7), '0000 .... 0200 .... 08000000 ........'), |
(0x08 (..8), '0000 .... 0200 .... 09000000 ........'), |
(0x09 (..9), '0000 .... 0200 .... 0a000000 ........'), |
(0x0a (.10), '0000 .... 0200 .... 0b000000 ........'), |
(0x0b (.11), '0000 .... 0200 .... 0c000000 ........'), |
(0x0c (.12), '0000 .... 0200 .... 0d000000 ........'), /
(0x0d (.13), '0200 .... 0100 .... 6c000000 0e000000'), > CALL :6C=:R1_LT_R2(R1,R2), ret {R0}   \  EXIT if PARAM < 11
(0x0e (.14), '0100 .... 0000 .... 77000000 0f000000'), > RETURN if R0 != 0                     /    (with R0=0)
(0x0f (.15), '0200 .... 0100 .... 14000000 10000000'), > CALL :14, ret {R0}                    \
(0x10 (.16), '0100 .... 0200 .... 10000000 11000000'), \                                       | R2 = :14=:SUM_LEN_HAILSTONE(PARAM)
(0x11 (.17), '0100 .... 0000 .... 12000000 13000000'), | MOV R2,R0 ; SET R0,0                  |
(0x12 (.18), '0000 .... 0200 .... 11000000 ........'), /                                       /
(0x13 (.19), '0200 .... 0100 .... 40000000 77000000'), > CALL :40, ret {R0}, then RETURN/EXIT  > RETURN R0 = :14=:FIBO_MOD(PARAM,R2)


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : SUM_LEN_HAILSTONE : PARAMS(R1) : RET(R0)
(0x14 (.20), '0100 .... 0200 .... 14000000 15000000'), SET R2, 0                   > R2=0
                                         +++ LOOP START                            \
(0x15 (.21), '0200 .... 0100 .... 1d000000 16000000'), > CALL :1D, ret {R0}        | DO:
(0x16 (.22), '0100 .... 0000 .... 17000000 18000000'), \ ADD R2,R0 ; SET R0,0      |   R2 += :1D=:LEN_HAILSTONE(R1)
(0x17 (.23), '0000 .... 0200 .... 16000000 ........'), /                           | WHILE R1--
(0x18 (.24), '0100 .... 0100 .... 19000000 1a000000'), \ WHILE R1--                |
(0x19 (.25), '0100 .... 1900 .... 00000000 15000000'), /                           |
                                         +++ LOOP END                              /
(0x1a (.26), '0100 .... 0000 .... 1a000000 1b000000'), \                           \
(0x1b (.27), '0100 .... 0200 .... 1c000000 77000000'), | MOV R0,R2 ; SET R2,0      | RETURN R2 AS R0
(0x1c (.28), '0000 .... 0000 .... 1b000000 ........'), / THEN RETURN R0            /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : LEN_HAILSTONE : PARAMS(R1) : RET(R0)
(0x1d (.29), '0100 .... 0200 .... 1d000000 1e000000'), > SET R2,0
                                         +++ LOOP START                                            \
(0x1e (.30), '0200 .... 0100 .... 54000000 1f000000'), > CALL :54:=RET_R1(R1), ret {R0}            |
(0x1f (.31), '0100 .... 0300 .... 1f000000 20000000'), \                                           |
(0x20 (.32), '0100 .... 0000 .... 21000000 22000000'), | MOV R3,R0 ; SET R0,0                      | DO
(0x21 (.33), '0000 .... 0300 .... 20000000 ........'), /                                           |   R1 = :2D=:HAILSTONE_NEXT(R1)
(0x22 (.34), '0100 .... 0300 .... 23000000 2a000000'), \ LOOPBREAK IF R3 < 2                       |   R2 += 1
(0x23 (.35), '0100 .... 0300 .... 24000000 2a000000'), /                                           | WHILE R1 > 1
(0x24 (.36), '0200 .... 0100 .... 2d000000 25000000'), > CALL :2D=:HAILSTONE_NEXT(R1), ret {R0}    |
(0x25 (.37), '0000 .... 0200 .... 26000000 ........'), > INC R2                                    |
(0x26 (.38), '0100 .... 0100 .... 26000000 27000000'), \                                           |
(0x27 (.39), '0100 .... 0000 .... 28000000 29000000'), | MOV R1,R0 ; SET R0,0                      |
(0x28 (.40), '0000 .... 0100 .... 27000000 ........'), /                                           |
(0x29 (.41), '0100 .... 1900 .... 00000000 1e000000'), > LOOP                                      |
                                         +++ LOOP EXIT                                             /
(0x2a (.42), '0100 .... 0000 .... 2a000000 2b000000'), \
(0x2b (.43), '0100 .... 0200 .... 2c000000 77000000'), | RETURN R2 AS R0
(0x2c (.44), '0000 .... 0000 .... 2b000000 ........'), /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : HAILSTONE_NEXT : PARAMS(R1) : RET(R0)
(0x2d (.45), '0100 .... 0200 .... 2d000000 2e000000'), > SET R2,0                            \
(0x2e (.46), '0200 .... 0100 .... 54000000 2f000000'), > CALL :54:=RET_R1(R1), ret {R0}      | MOV R2,R1
(0x2f (.47), '0100 .... 0000 .... 30000000 31000000'), \ ADD R2, R0 ; SET R0,0               |
(0x30 (.48), '0000 .... 0200 .... 2f000000 ........'), /                                     /
(0x31 (.49), '0200 .... 0200 .... 5c000000 32000000'), > CALL :5C=:DIV_R2_2(R2), ret {R0,R1} \ RETURN R0=(PARAM/2) if PARAM is pair
(0x32 (.50), '0100 .... 0100 .... 33000000 77000000'), > RETURN IF R1 == 0, ie R2%2 == 0     /
(0x33 (.51), '0100 .... 0000 .... 33000000 34000000'), > SET R0,0                            \
(0x34 (.52), '0100 .... 0100 .... 34000000 35000000'), \                                     |
(0x35 (.53), '0100 .... 0200 .... 36000000 37000000'), | MOV R1,R2 ; SET R2,0                |
(0x36 (.54), '0000 .... 0100 .... 35000000 ........'), /                                     |
(0x37 (.55), '0200 .... 0100 .... 54000000 38000000'), > CALL :54:=RET_R1(R1), ret {R0}      |
(0x38 (.56), '0100 .... 0000 .... 39000000 3a000000'), \ ADD R2,R0 ; SET R0,0                |
(0x39 (.57), '0000 .... 0200 .... 38000000 ........'), /                                     |
(0x3a (.58), '0200 .... 0100 .... 54000000 3b000000'), > CALL :54:=RET_R1(R1), ret {R0}      |
(0x3b (.59), '0100 .... 0100 .... 3c000000 3d000000'), \ ADD R0,R1 ; SET R1,0                |
(0x3c (.60), '0000 .... 0000 .... 3b000000 ........'), /                                     |
(0x3d (.61), '0100 .... 0200 .... 3e000000 3f000000'), \ ADD R0,R2 ; SET R2,0                |
(0x3e (.62), '0000 .... 0000 .... 3d000000 ........'), /                                     | ELSE RETURN R0=(PARAM*3 + 1) if PARAM is odd
(0x3f (.63), '0000 .... 0000 .... 77000000 ........'), > INC R0 and RETURN                   /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : FIBO_MOD : PARAMS(R1,R2) : RET(R0)
(0x40 (.64), '0200 .... 0100 .... 54000000 41000000'), > CALL :54:=RET_R1(R1), ret {R0}        \
(0x41 (.65), '0100 .... 0300 .... 41000000 42000000'), \                                       |
(0x42 (.66), '0100 .... 0000 .... 43000000 44000000'), | MOV R3,R0 ; SET R0,0                  |
(0x43 (.67), '0000 .... 0300 .... 42000000 ........'), /                                       |
(0x44 (.68), '0100 .... 0300 .... 45000000 77000000'), > EXIT IF R3 == 0                       | RETURN R0=0 if ARG1==0
(0x45 (.69), '0000 .... 0000 .... 46000000 ........'), > INC R0                                |
(0x46 (.70), '0100 .... 0300 .... 47000000 77000000'), > EXIT IF R3 == 0                       | RETURN R0=1 if ARG1==1
(0x47 (.71), '0100 .... 0100 .... 48000000 77000000'), > EXIT IF R1 == 0                       |
(0x48 (.72), '0200 .... 0100 .... 40000000 49000000'), > CALL :40(R1,R2), ret {R0}             |
(0x49 (.73), '0100 .... 0400 .... 49000000 4a000000'), \                                       |
(0x4a (.74), '0100 .... 0000 .... 4b000000 4c000000'), | MOV R4,R0 ; SET R0,0                  | ELSE
(0x4b (.75), '0000 .... 0400 .... 4a000000 ........'), /                                       |   RETURN
(0x4c (.76), '0100 .... 0100 .... 4d000000 77000000'), > EXIT IF R1 == 0                       |       (:FIBO_MOD(ARG1-1, ARG2) + :FIBO_MOD(ARG1-2, ARG2)) % ARG2
(0x4d (.77), '0200 .... 0100 .... 40000000 4e000000'), > CALL :40, ret {R0}                    |
(0x4e (.78), '0100 .... 0000 .... 4f000000 50000000'), \                                       |
(0x4f (.79), '0000 .... 0400 .... 4e000000 ........'), / ADD R4,R0 ; SET R0,0                  |
(0x50 (.80), '0100 .... 0100 .... 50000000 51000000'), \                                       |
(0x51 (.81), '0100 .... 0400 .... 52000000 53000000'), | MOV R1,R4 ; SET R4,0                  |
(0x52 (.82), '0000 .... 0100 .... 51000000 ........'), /                                       |
(0x53 (.83), '0200 .... 0100 .... 63000000 77000000'), > RETURN :63=:R1_MOD_R2(R1,R2)          /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : RET_R1 : PARAMS(R1) : RET(R0)
(0x54 (.84), '0100 .... 0000 .... 54000000 55000000'), \                       \
(0x55 (.85), '0100 .... 0100 .... 56000000 77000000'), | MOV R0,R1 ; SET R1,0  | RETURN R1 AS R0
(0x56 (.86), '0000 .... 0000 .... 55000000 ........'), /                       /

(0x57 (.87), '0100 .... 0000 .... 57000000 58000000'), \
(0x58 (.88), '0100 .... 0100 .... 59000000 5a000000'), | UNUSED?
(0x59 (.89), '0000 .... 0000 .... 58000000 ........'), |
(0x5a (.90), '0100 .... 0200 .... 5b000000 77000000'), |
(0x5b (.91), '0000 .... 0000 .... 5a000000 ........'), /


               +0   +2   +4   +6   +8       +C          >>> FUNCTION START : DIV_R2_2 : PARAMS(R2) : RET(R0,R1)
(0x5c (.92), '0100 .... 0000 .... 5c000000 5d000000'), > SET R0,0
(0x5d (.93), '0100 .... 0100 .... 5d000000 5e000000'), > SET R1,0
                                         +++ LOOP START (R2)                   \
(0x5e (.94), '0100 .... 0200 .... 5f000000 77000000'), > DEC R2 OR RETURN      |
(0x5f (.95), '0100 .... 0200 .... 60000000 62000000'), > DEC R2 OR GOTO :62    | RETURN {
(0x60 (.96), '0000 .... 0000 .... 61000000 ........'), > INC R0                |    R0 = R2 / 2
(0x61 (.97), '0100 .... 1900 .... 00000000 5e000000'), > LOOP                  |    R1 = R1 % 2
                                         +++ LOOP END ()                       | }
(0x62 (.98), '0000 .... 0100 .... 77000000 ........'), > INC R1                /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : R1_MOD_R2 : PARAMS(R1,R2) : RET(R0)
                                         +++ BEGIN LOOP
(0x63 (.99), '0200 .... 0100 .... 6c000000 64000000'), > CALL :6C=:R1_LT_R2(R1,R2)         \
(0x64 (100), '0100 .... 0000 .... 65000000 67000000'), > GOTO :67 IF R0=0 (ie. R2 >= R1)   | RET R0 = R1 % R2
(0x65 (101), '0100 .... 0100 .... 66000000 77000000'), \                                   |
(0x66 (102), '0000 .... 0000 .... 65000000 ........'), / RETURN R1 IF R1 < R2              |
(0x67 (103), '0200 .... 0100 .... 71000000 68000000'), > CALL :71=:R1_SUB_R2(R1,R2)        |
(0x68 (104), '0100 .... 0100 .... 68000000 69000000'), \                                   |
(0x69 (105), '0100 .... 0000 .... 6a000000 6b000000'), | MOV R1,R0 ; SET R0,0              |
(0x6a (106), '0000 .... 0100 .... 69000000 ........'), /                                   |
(0x6b (107), '0100 .... 1900 .... 00000000 63000000'), > LOOP                              /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START R1_LT_R2 : PARAMS(R1,R2) : RET(R0)
(0x6c (108), '0100 .... 0000 .... 6c000000 6d000000'), > SET R0,0                  \
(0x6d (109), '0100 .... 0200 .... 6e000000 77000000'), > DEC R2 OR RETURN R0=0     | RET R0 = (R1 < R2)
(0x6e (110), '0100 .... 0100 .... 6f000000 70000000'), \ DEC R1 OR :70             |
(0x6f (111), '0100 .... 1900 .... 00000000 6c000000'), | OR LOOP                   |
(0x70 (112), '0000 .... 0000 .... 77000000 ........'), / RETURN R0=1               /


              +0   +2   +4   +6   +8       +C          >>> FUNCTION START : R1_SUB_R2 : PARAMS(R1,R2) : RET(R0)
(0x71 (113), '0100 .... 0200 .... 72000000 74000000'),         => RETURN MAX(0, R2-R1)
(0x72 (114), '0100 .... 0100 .... 73000000 77000000'),
(0x73 (115), '0100 .... 1900 .... 00000000 71000000'),
(0x74 (116), '0100 .... 0000 .... 74000000 75000000'),
(0x75 (117), '0100 .... 0100 .... 76000000 77000000'),
(0x76 (118), '0000 .... 0000 .... 75000000 ........')]
